Instructions for building a switchbox to turn the Netgear Arlo camera motion detector on and off
** L. Shustek, 11 Aug 2015

1. Buy the CanaKit Raspberry Pi 2 Starter Kit with WiFi for $85 (list) or $70 (Amazon)
     http://www.canakit.com/raspberry-pi-2-basic-kit.html
     http://www.amazon.com/CanaKit-Raspberry-Complete-Original-Preloaded/dp/B008XVAVAW
  - Assemble it, following the instructions in the Quick-Start Guide.
  - Temporarily install a keyboard and mouse (Logitech MK320 wireless works great) and an HDMI-connected screen
  - Apply power through the USB connector.
  - Choose Raspbian as the operating system.
  - Reboot. 
  - Login as "pi", password "raspberry".
  - Type "startx" to start the graphical windows interface.
  - Run the wifi configuration program from Menu/Preferences/WiFiConfiguration
  - Scan for networks and double-click the one you want. Enter you configuration (including password) and 
    click "Add", then "Close", then "Connect".

2. Test and configure the web browser for auto-login to arlo.netgear.
  - Click on the globe logo on the top row for the Epiphany web browser.
  - Go to settings/preferences/privacy and unclick "Remember passwords"
  - Type "arlo.netgear.com/#/login" in the address bar and hit return. It should go to the Arlo login page.
  - Enter your credentials, tick "Remember me", and Log In. 
  - Log out
  - Exit the web browser. 
  - Choose menu/shutdown.

3. Add the switch and light
  - Wire a single-pole double-throw momentary-contact switch (SPDT Mom-Off-Mom) as follows:
      - the center lead to a ground (like pin 26 on the 40-pin header)
      - the "motion on" switch contact to GPIO9, pin 21
      - the "motion off" switch contact to GPIO10, pin 19
  - Wire an LED as follows:
      - the cathode (negative) to a ground (like pin 20)
      - the anode (positive) to one end of a 680-ohm 1/8 watt resistor
      - the other end of the resistor to GPIO11, pin 23
  - Power up

4. Install the software
  - Open a terminal window by clicking on the terminal icon on the top row.
  - Type "sudo apt-get install xdotool tightvncserver x11-xserver-utils". Confirm that you want to continue.
  - Insert a USB memory stick containing the arlo scripts into one of the USB ports.
  - "Open in File Manager".
  - Drag the arlo scripts to the "pi" directory (on the top of the list).
  - Close the File Manager and remove the USB stick.
  - Initialize the Xvnc server by typing "vncserver :99". Give it (and remember) a simple 6-character password. 
    Don't provide a view-only password.
5.- Test your switch and light
   - In the terminal windows, type "bash testswitch"
   - Push switch up momentarily; the light should go on.
   - Push the switch down momentarily; the light should go off.

6. Test controlling the camera mode with the keyboard/mouse/screen attached
  - In the terminal window, type "bash arlo test". (Ignore "Device or resource busy" errors.)
  - When you see "waiting for switch", mometarily move the switch. Don't touch the mouse!
  - The LED will flash. It should start the browser, login to Arlo, 
    set the motion-detection off or on depending on which way you moved the switch, then exit.
 
7. (Optional but helpful if there are problems) Run it from a serial console without a keyboard/mouse/screen attached 
  - Power down ("sudo shutdown -h now") and disconnect the keyboard/screen/mouse
  - Connect a USB serial cable like https://www.adafruit.com/products/954 to your computer
    (See https://learn.adafruit.com/adafruits-raspberry-pi-lesson-5-using-a-console-cable?view=all)
  - Run a terminal emulator like Putty, http://www.putty.org/
  - Power up the Raspberry Pi and login
  - Type "bash arlo". When you see "waiting for switch", mometarily move the switch.
  - The LED will flash. It should start the browser, login to Arlo, 
    set the motion-detection off or on depending on which way you moved the switch, then exit.
  - Verify that the change occured by logging on to arlo.netgear.com from another browser.

8. Make it autostart without a keyboard/mouse/screen
   - (1) Bypass the login request for the serial port console.
     - From a terminal window, execute "sudo nano /etc/inittab" to edit the configuration file
     - Comment out the last line with a # at the beginning
        # T0:23:respawn:/sbin/getty -L ttyAMA0 115200 vt100
       and add this line afterwards:
        T0:23:respawn:/bin/login -f pi ttyAMA0 </dev/ttyAMA0 >/dev/ttyAMA0 2>&1
   - (2) Make our script run automatically
      - chmod +x arlo
      - "nano .bashrc", and at the end of the file add these lines:
           #start arlo camera controller
           echo From .bashrc: starting Arlo
           if [ $(tty) == /dev/ttyAMA0 ]; then
             ./arlo
           fi 
    - Test it: "bash powerdown" to shut down, disconnect the keyboard/screen/mouse, and power up.
      If you want, you can keep the serial terminal connected to see what is happening, but in general
      the only things you need plugged into the Raspberry Pi are the wifi adapter and the power cord.


Other notes:

-  I currently have only one camera. The mouse movements and clicks may have to change if you have more than one,
   or if you have added custom Arlo modes. In the next week or so I'll be checking out the consequence of adding a second camera.

- In general, this isn't a very robust solution, because it depends on exactly what's on the browser screen. Eventually
  we hope that Netgear will add a programming interface, perhaps using the USB ports on the Arlo gateway.

- To find screen coordinates for moving the mouse to other browser window locations
  - Boot with a keyboard/mouse/screen attached, and start the GUI with "startx".
  - Open a terminal window and type "bash mouseloc". 
    The browser will start, the window will be repositioned, and the mouse position will be displayed as you move it.
    Record the locations you need to modify the "arlo" file.
  - Ctrl-C in the terminal window to stop it.
  
- To cleanly shut down from the terminal window (better the just removing power)
  - bash powerdown

- To fix files that were edited in Windows and have extraneous ctrl-M characters:
   - sudo apt-get install dos2unix
   - dos2unix <file>

